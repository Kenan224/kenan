"""
Streamlit Web Application for Kinetic Modeling Analysis
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO

# Import custom modules
from data_processor import validate_data_structure, preprocess_data, get_data_summary, read_csv_file
from kinetic_models import (
    find_stable_points, fit_pfo_model, fit_pso_model,
    create_results_summary, create_detailed_results
)
from visualization import create_matplotlib_plots

# Configure page
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
    page_icon="üßë‚Äçüî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
.metric-container {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 0.5rem 0;
}
</style>
""", unsafe_allow_html=True)

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

    # Student and supervisor information
    st.markdown("""
    <div style="background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
        <p style="margin: 0; font-size: 14px;">
            <strong>–°–¢–£–î–ï–ù–¢:</strong> –ê–ª—Å–∞–¥–∏ –ö. <br>
            <strong>–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨:</strong> –ö–∏—Ä–µ–µ–≤–∞ –ê.–í
        </p>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("---")

    # Sidebar for parameters
    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

        # Using Matplotlib for all plots
        plot_type = "Matplotlib"

        st.markdown("---")
        st.markdown("### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É")
        st.markdown("""
        **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**
        - `—Ç, –º–∏–Ω` (–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö)
        - `–ê` (–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è A)

        **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**
        - `–ê0` (–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è) - –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ê
        - `–ê/–ê0` (–û—Ç–Ω–æ—à–µ–Ω–∏–µ A/A0) - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - Excel (.xlsx, .xls)
        - CSV (.csv) —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        """)

    # Data input method selection
    st.header("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"],
        index=0,
        horizontal=True
    )

    df = None
    selected_sheet = None

    if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        # File upload section
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            type=['xlsx', 'xls', 'csv'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV —Å –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )

        if uploaded_file is not None:
            try:
                file_extension = uploaded_file.name.split('.')[-1].lower()

                if file_extension == 'csv':
                    # Handle CSV files
                    df = read_csv_file(uploaded_file)

                    # Check if file is empty
                    if df.empty:
                        st.error("–§–∞–π–ª CSV –ø—É—Å—Ç")
                        return

                else:
                    # Handle Excel files
                    excel_file = pd.ExcelFile(uploaded_file)
                    sheet_names = excel_file.sheet_names

                    # Add sheet selector to sidebar if multiple sheets exist
                    selected_sheet = None
                    if len(sheet_names) > 1:
                        with st.sidebar:
                            st.markdown("---")
                            selected_sheet = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç Excel",
                                sheet_names,
                                index=0,
                                help="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ"
                            )
                    else:
                        selected_sheet = sheet_names[0]

                    # Read the selected sheet
                    try:
                        df = pd.read_excel(uploaded_file, sheet_name=selected_sheet)

                        # Check if sheet is empty
                        if df.empty:
                            st.error(f"–õ–∏—Å—Ç '{selected_sheet}' –ø—É—Å—Ç")
                            if len(sheet_names) > 1:
                                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                            return

                    except Exception as sheet_error:
                        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ '{selected_sheet}': {str(sheet_error)}")
                        if len(sheet_names) > 1:
                            st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                        return

                # Validate structure (common for both CSV and Excel)
                is_valid, error_message = validate_data_structure(df)

                if not is_valid:
                    st.error(f"{error_message}")
                    if file_extension != 'csv' and len(sheet_names) > 1:
                        st.error(f"–õ–∏—Å—Ç '{selected_sheet}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                    return

                st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                if file_extension != 'csv' and len(sheet_names) > 1:
                    st.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–∏—Å—Ç: **{selected_sheet}**")

                # Show raw data preview
                with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                    st.dataframe(df, use_container_width=True)
                    st.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # Debug information for CSV files
                    if file_extension == 'csv':
                        st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö:**")
                        for col in ['—Ç, –º–∏–Ω', '–ê', '–ê0', '–ê/–ê0']:
                            if col in df.columns:
                                sample_values = df[col].head(3).tolist()
                                data_type = df[col].dtype
                                st.text(f"{col}: {data_type} | –ü—Ä–∏–º–µ—Ä—ã: {sample_values}")

                # Data editing section for uploaded files
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                st.info("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º. –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

                # Prepare data for editing
                edit_df = df.copy()

                # Configure column settings for the data editor
                column_config = {
                    "—Ç, –º–∏–Ω": st.column_config.NumberColumn(
                        "–í—Ä–µ–º—è (–º–∏–Ω)",
                        help="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö",
                        min_value=0.0,
                        step=0.0001,
                        format="%.4f"
                    ),
                    "–ê": st.column_config.NumberColumn(
                        "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                        help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                        min_value=0.0,
                        step=0.0001,
                        format="%.5f"
                    ),
                    "–ê0": st.column_config.NumberColumn(
                        "–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0",
                        help="–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0",
                        min_value=0.0,
                        step=0.0001,
                        format="%.5f"
                    )
                }

                # Add –ê/–ê0 column configuration if it exists
                if '–ê/–ê0' in edit_df.columns:
                    column_config["–ê/–ê0"] = st.column_config.NumberColumn(
                        "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ê/–ê0",
                        help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ê/–ê0 (–±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                        min_value=0.0,
                        step=0.0001,
                        format="%.4f",
                        disabled=True  # Make this column read-only since it's calculated
                    )

                # Create editable data table
                edited_df = st.data_editor(
                    edit_df,
                    use_container_width=True,
                    num_rows="dynamic",
                    column_config=column_config,
                    key="uploaded_data_editor"
                )

                # Auto-calculate –ê/–ê0 if –ê and –ê0 columns exist
                if '–ê' in edited_df.columns and '–ê0' in edited_df.columns:
                    # Create a copy to avoid modifying the original
                    processed_edited_df = edited_df.copy()

                    # Remove rows with invalid data
                    valid_mask = (processed_edited_df['–ê'] > 0) & (processed_edited_df['–ê0'] > 0) & (processed_edited_df['—Ç, –º–∏–Ω'] >= 0)
                    processed_edited_df = processed_edited_df[valid_mask]

                    if not processed_edited_df.empty:
                        # Recalculate –ê/–ê0
                        processed_edited_df['–ê/–ê0'] = processed_edited_df['–ê'] / processed_edited_df['–ê0']
                        processed_edited_df['–ê/–ê0'] = processed_edited_df['–ê/–ê0'].round(4)

                        # Update df to use the edited and processed data
                        df = processed_edited_df.copy()

                        # Show updated preview
                        with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                            st.dataframe(df, use_container_width=True)
                            st.info(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df)}")
                    else:
                        st.warning("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.")
                        df = None

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

        else:
            # Instructions when no file is uploaded
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

    else:  # Manual data entry
        st.subheader("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

        # Initialize session state for tracking first A value
        if 'first_a_value' not in st.session_state:
            st.session_state.first_a_value = None
        if 'manual_data_initialized' not in st.session_state:
            st.session_state.manual_data_initialized = False

        # Create empty template data
        default_data = pd.DataFrame({
            '—Ç, –º–∏–Ω': [0.0],
            '–ê': [0.0]
        })

        st.info("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∏–∂–µ. –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        # Data editor
        edited_data = st.data_editor(
            default_data,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "—Ç, –º–∏–Ω": st.column_config.NumberColumn(
                    "–í—Ä–µ–º—è (–º–∏–Ω)",
                    help="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö",
                    min_value=0.0,
                    step=0.0001,
                    format="%.4f"
                ),
                "–ê": st.column_config.NumberColumn(
                    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                    help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                    min_value=0.0,
                    step=0.0001,
                    format="%.5f"
                ),
                "–ê0": st.column_config.NumberColumn(
                    "–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0",
                    help="–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0",
                    min_value=0.0,
                    step=0.0001,
                    format="%.5f"
                )
            }
        )

        # Auto-calculate A/A0 ratios and show preview
        if not edited_data.empty and '–ê' in edited_data.columns and '–ê0' in edited_data.columns:
            # Remove rows with zero or negative values
            valid_data = edited_data[(edited_data['–ê'] > 0) & (edited_data['–ê0'] > 0) & (edited_data['—Ç, –º–∏–Ω'] >= 0)]

                if not valid_data.empty:
                    # Calculate A/A0 ratios
                    valid_data = valid_data.copy()
                    valid_data['–ê/–ê0'] = valid_data['–ê'] / valid_data['–ê0']
                    valid_data['–ê/–ê0'] = valid_data['–ê/–ê0'].round(4)

                    # Show preview with calculated ratios (only visible columns plus –ê/–ê0)
                    st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ê/–ê0")
                    display_data = valid_data[['—Ç, –º–∏–Ω', '–ê', '–ê/–ê0']].copy()
                    st.dataframe(display_data, use_container_width=True)
                    st.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: –ê0 = {first_a_value:.5f} –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")

                # Show auto-population info if applicable
                if len(processed_data) > 0 and processed_data.iloc[0]['–ê'] > 0:
                    st.success(f"–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: –ê0 = {processed_data.iloc[0]['–ê']:.5f} –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫")

        # Validate manual data
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
            if edited_data.empty:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            else:
                # Use the valid data with calculated A/A0
                if not edited_data.empty and '–ê' in edited_data.columns and '–ê0' in edited_data.columns:
                    # Remove rows with zero or negative values
                    valid_data = processed_data[(processed_data['–ê'] > 0) & (processed_data['–ê0'] > 0) & (processed_data['—Ç, –º–∏–Ω'] >= 0)]

                    if valid_data.empty:
                        st.error("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.")
                    else:
                        # Calculate A/A0 ratios
                        valid_data = valid_data.copy()
                        valid_data['–ê/–ê0'] = valid_data['–ê'] / valid_data['–ê0']

                        # Validate the processed data
                        is_valid, error_message = validate_data_structure(valid_data)

                        if not is_valid:
                            st.error(f"{error_message}")
                        else:
                            # Check for additional validation
                            if valid_data['—Ç, –º–∏–Ω'].duplicated().any():
                                st.error("–ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è")
                            elif not valid_data['—Ç, –º–∏–Ω'].is_monotonic_increasing:
                                st.error("–ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ")
                            else:
                                # Data is valid, use it for analysis
                                df = valid_data.copy()
                                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã!")
                                st.info(f"–í–≤–µ–¥–µ–Ω–æ {len(df)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")

    # Process data if we have valid data (from either source)
    if df is not None and not df.empty:
        pass  # Debug information removed as requested

        # Process data
        processed_df = preprocess_data(df)

        if len(processed_df) == 0:
            st.error("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            st.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            st.error("- –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ")
            st.error("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—è—Ç–∞—è –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)")
            st.error("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
            return

        # Data summary
        summary = get_data_summary(processed_df)

        st.header("–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏", summary['total_points'])
        with col2:
            st.metric("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", f"{summary['time_range'][0]:.1f} - {summary['time_range'][1]:.1f} –º–∏–Ω")
        with col3:
            st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", f"{summary['a0_value']:.3f}")
        with col4:
            st.metric("–î–∏–∞–ø–∞–∑–æ–Ω A/A0", f"{summary['a_a0_range'][0]:.3f} - {summary['a_a0_range'][1]:.3f}")

        # Find stable points (using fixed threshold of 0.1)
        stable_indices = find_stable_points(processed_df['ln_A_A0'], processed_df['—Ç, –º–∏–Ω'], 0.1)
        selected_data = processed_df.iloc[stable_indices].copy()

        st.header("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏")
        st.info(f"–í—ã–±—Ä–∞–Ω–æ {len(selected_data)} —Ç–æ—á–µ–∫ –∏–∑ {len(processed_df)}")
        st.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {selected_data['—Ç, –º–∏–Ω'].iloc[0]:.1f} - {selected_data['—Ç, –º–∏–Ω'].iloc[-1]:.1f} –º–∏–Ω")

        # Fit models
        try:
            k1, pfo_predictions, mape_pfo, r2_pfo = fit_pfo_model(selected_data)
            k2, pso_predictions, mape_pso, r2_pso = fit_pso_model(selected_data)

            # Results summary
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

            results_summary = create_results_summary(k1, k2, mape_pfo, mape_pso, r2_pfo, r2_pso)

            # Display summary table
            st.subheader("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            st.dataframe(results_summary, use_container_width=True)

            # Model comparison metrics
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### –ú–æ–¥–µ–ª—å PFO")
                st.metric("R¬≤ Score", f"{r2_pfo:.4f}")
                st.metric("MAPE (%)", f"{mape_pfo:.2f}")
                st.metric("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ k‚ÇÅ", f"{abs(k1):.5f} –º–∏–Ω‚Åª¬π")

            with col2:
                st.markdown("### –ú–æ–¥–µ–ª—å PSO")
                st.metric("R¬≤ Score", f"{r2_pso:.4f}")
                st.metric("MAPE (%)", f"{mape_pso:.2f}")
                st.metric("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ k‚ÇÇ", f"{k2:.5f} –ª/(–º–≥¬∑–º–∏–Ω)")

            # Detailed results
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                detailed_results = create_detailed_results(pfo_predictions, pso_predictions)
                st.dataframe(detailed_results, use_container_width=True)

            # Plots
            st.header("–ì—Ä–∞—Ñ–∏–∫–∏")

            # Generate Matplotlib plots
            fig_main = create_matplotlib_plots(processed_df, selected_data, pfo_predictions, pso_predictions, k1, k2)
            st.pyplot(fig_main)

            # Download results
            st.header("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            # Prepare download data
            download_data = {
                'Summary': results_summary,
                'Detailed_Results': detailed_results,
                'Selected_Data': selected_data,
                'PFO_Predictions': pfo_predictions,
                'PSO_Predictions': pso_predictions
            }

            # Create Excel file for download
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                for sheet_name, data in download_data.items():
                    data.to_excel(writer, sheet_name=sheet_name, index=False)

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Ñ–∞–π–ª Excel",
                data=output.getvalue(),
                file_name="kinetic_modeling_results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    else:
        # Show instructions when no data is available
        if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
            pass
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main()
